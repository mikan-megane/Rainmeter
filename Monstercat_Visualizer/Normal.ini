[Rainmeter]
Update=1


[Metadata]
Name=Monstercat_Visualizer for Rainmeter 1.2.1
Author=marcopixel
Version=1.2.1
License=CC BY-NC-SA 4.0

[Variables]
@Include="#CURRENTPATH#D8Variables.inc"
IncFile="#CURRENTPATH#D8Variables.inc"
; Includes the variables/styles used for the skin.
@include=#@#variables.ini

@include6=#@#mikan.inc

; These variables are constants and are better untouched! Changing here will probably break something.
BarHeight=(#WORKAREAHEIGHT#*#Scale#)/2
BarGapCalc=(#BarGap#*#Scale#)
BarWidthCalc=(#BarWidth#*#Scale#)
SkinWidth=#BarGapCalc#*#BarCount# + #BarWidthCalc#*#BarCount#
GenreColor=#Color#

; ; Measure NowPlaying - gets track data like title, artist, etc...
; [MeasurePlayer]
; Measure=Plugin
; Plugin=NowPlaying
; PlayerName=#PlayerName#
; PlayerType=TITLE
; UpdateDivider=10
; [MeasureArtist]
; Measure=Plugin
; Plugin=NowPlaying
; PlayerName=[MeasurePlayer]
; PlayerType=ARTIST
; UpdateDivider=10
; [MeasureCover]
; Measure=Plugin
; Plugin=NowPlaying
; PlayerName=[MeasurePlayer]
; PlayerType=COVER
; Substitute="":"#@#images\nocover.png"
; UpdateDivider=10
; [MeasurePosition]
; Measure=Plugin
; Plugin=NowPlaying
; PlayerName=[MeasurePlayer]
; PlayerType=POSITION
; UpdateDivider=100
; [MeasureDuration]
; Measure=Plugin
; Plugin=NowPlaying
; PlayerName=[MeasurePlayer]
; PlayerType=DURATION
; UpdateDivider=10
; [MeasurePlayPause]
; Measure=Plugin
; Plugin=NowPlaying
; PlayerName=[MeasurePlayer]
; PlayerType=STATE
; Substitute="0":"#@#images\play.png","1":"#@#images\pause.png","2":"#@#images\play.png"
; UpdateDivider=10
; [MeasureGenre]
; Measure=Plugin
; Plugin=NowPlaying
; PlayerName=[MeasurePlayer]
; PlayerType=Genre
; UpdateDivider=10
; ; You can add your own genres here.
; ; Use | as dividier and replace spaces with \s (otherwise it won't work)
; ; Electronic/EDM
; IfMatch=EDM|Electronic|Breaks|Chillout|Bounce|Chill
; IfMatchAction=[!SetVariable GenreColor "#EDM#"]
; ; Electro
; IfMatch2=Electro
; IfMatchAction2=[!SetVariable GenreColor "#Electro#"]
; ; House/Progressive House
; IfMatch3=House|Electro\sHouse|Progressive\sHouse
; IfMatchAction3=[!SetVariable GenreColor "#House#"]
; ; Drum & Bass
; IfMatch4=Drum\s&\sBass|DnB
; IfMatchAction4=[!SetVariable GenreColor "#DnB#"]
; ; Dubstep
; IfMatch5=Dubstep
; IfMatchAction5=[!SetVariable GenreColor "#Dubstep#"]
; ; Drumstep
; IfMatch6=Drumstep
; IfMatchAction6=[!SetVariable GenreColor "#Drumstep#"]
; ; Glitch Hop
; IfMatch7=Glitch\sHop|GlitchHop
; IfMatchAction7=[!SetVariable GenreColor "#GlitchHop#"]
; ; Trap
; IfMatch8=Trap
; IfMatchAction8=[!SetVariable GenreColor "#Trap#"]
; ; Trance
; IfMatch9=Trance|Deep\sHouse
; IfMatchAction9=[!SetVariable GenreColor "#Trance#"]
; ; Hard Dance
; IfMatch10=Hard\sDance
; IfMatchAction10=[!SetVariable GenreColor "#HardDance#"]
; ; Nu Disco/Indie Dance
; IfMatch11=Nu\sDisco|NuDisco|Disco|Indie\sDance|Electro\sSwing
; IfMatchAction11=[!SetVariable GenreColor "#NuDisco#"]
; ; Future Bass
; IfMatch12=Future|Future\sBass
; IfMatchAction12=[!SetVariable GenreColor "#FutureBass#"]
; ; Here is an example for an custom genre. Colors need to be rgb(a) values.
; IfMatch13=Mashup|Mash\sUp
; IfMatchAction13=[!SetVariable GenreColor "192,255,99"]

; [MeasureHideTrackInfo]
; Measure=Calc
; Formula=#HideTrackInformation#
; IfBelowValue=1
; IfBelowAction=[!HideMeter "MeterCover"][!ShowMeter "MeterMonstercatCover"]
; IfEqualValue=2
; IfEqualAction=[!HideMeterGroup "TrackInfo"]
; UpdateDivider=-1

[MeasureShowGenreColors]
Measure=Calc
Formula=#EnableGenreColors#
IfEqualValue=0
IfEqualAction=[!SetOptionGroup GroupBarColor MeterStyle "StyleStaticBar"][!SetOption MeterNoCover MeterStyle "StyleStaticMeter"]
IfAboveValue=0
IfAboveAction=[!SetOptionGroup GroupBarColor MeterStyle "StyleGenreBar"][!SetOption MeterNoCover MeterStyle "StyleGenreMeter"]
UpdateDivider=-1

; Measure AudioLevel - spectrum input
[MeasureAudio]
Measure=Plugin
Plugin=AudioLevel
Port=Output
FFTSize=#FFTSize#
FFTOverlap=#FFTOverlap#
FFTAttack=#FFTAttack#
FFTDecay=#FFTDecay#
Bands=#BarCount#
FreqMin=50
FreqMax=15000
Sensitivity=#Sensitivity#
RMSGain=3

; Script Factory - generates the bars for the visualizer
[ScriptFactoryBars]
Measure=Script
ScriptFile=#@#scripts\Factory.lua
IncFile=#@#include\MeterBars.inc
Number=(#BarCount#-1)
SectionName=MeterBar%%
Option0=Meter
Value0=BAR
Option1=Group
Value1=GroupBarColor
Option2=MeasureName
Value2=MeasureAudioSmoothed{%%+1}
Option3=X
Value3=(#BarGap#*#Scale#)R
Option4=Y
Value4=0
Option5=W
Value5=(#BarWidth#*#Scale#)
Option6=H
;Value6=#BarHeight#
Value6=#BarHeight# * 2
Option7=BarOrientation
Value7=Vertical
UpdateDivider=-1

; Script Refresher - refreshes the code to apply the changes from the factory
[ScriptRefresher]
Measure=Script
ScriptFile=#@#scripts\Refresher.lua
UpdateDivider=-1
Refreshed=0

; Styles
[StyleStaticBar]
;;;;;;;;;;;;;;;BarColor=#Color#
BarColor=#WinColor##WinAlpha#
[StyleStaticMeter]
SolidColor=#Color#
[StyleGenreBar]
BarColor=#GenreColor#
DynamicVariables=1
[StyleGenreMeter]
SolidColor=#GenreColor#
DynamicVariables=1

; Include the BandMeasures with raw data
@include3=#@#include\BandMeasures.inc

; Include the BandMeasures with smoothed data
@include4=#@#include\BandMeasuresSmoothed.inc

; Include the band meters
@include5=#@#include\MeterBars.inc

; Meter - Cover with music controls
; [MeterNoCover]
; Meter=IMAGE
; ImageName=#@#images\nocover.png
; X=(#BarGap#*#Scale#)
; Y=#BarHeight#+(30*#Scale#)
; W=(200*#Scale#)
; H=(200*#Scale#)
; MouseOverAction=[!ShowMeterGroup "MediaControls"]
; MouseLeaveAction=[!HideMeterGroup "MediaControls"]
; Group=TrackInfo
; [MeterCover]
; Meter=IMAGE
; Group=TrackInfo
; MeasureName=MeasureCover
; X=(#BarGap#*#Scale#)
; Y=#BarHeight#+(30*#Scale#)
; W=(200*#Scale#)
; H=(200*#Scale#)
; MouseOverAction=[!ShowMeterGroup "MediaControls"]
; MouseLeaveAction=[!HideMeterGroup "MediaControls"]
; [MeterMonstercatCover]
; Meter=IMAGE
; Group=TrackInfo
; ImageName=#@#images\nocover.png
; X=(#BarGap#*#Scale#)
; Y=#BarHeight#+(30*#Scale#)
; W=(200*#Scale#)
; H=(200*#Scale#)
; Hidden=1
; MouseOverAction=[!ShowMeterGroup "MediaControls"]
; MouseLeaveAction=[!HideMeterGroup "MediaControls"]
; [MeterPlayerOverlay]
; Meter=IMAGE
; X=0r
; Y=0r
; W=(200*#Scale#)
; H=(200*#Scale#)
; SolidColor=0,0,0,200
; Hidden=1
; Group=MediaControls
; [MeterPrevious]
; Meter=IMAGE
; ImageName=#@#images\previous.png
; X=(16*#Scale#)
; Y=(75*#Scale#)r
; W=(48*#Scale#)
; H=(48*#Scale#)
; LeftMouseUpAction=[!CommandMeasure MeasurePlayer "Previous"]
; AntiAlias=1
; Hidden=1
; Group=MediaControls
; [MeterPlayPause]
; Meter=IMAGE
; ImageName=[MeasurePlayPause]
; X=(20*#Scale#)R
; Y=0r
; W=(48*#Scale#)
; H=(48*#Scale#)
; LeftMouseUpAction=[!CommandMeasure MeasurePlayer "PlayPause"]
; Hidden=1
; Group=MediaControls
; DynamicVariables=1
; [MeterNext]
; Meter=IMAGE
; ImageName=#@#images\Next.png
; X=(20*#Scale#)R
; Y=0r
; W=(48*#Scale#)
; H=(48*#Scale#)
; LeftMouseUpAction=[!CommandMeasure MeasurePlayer "Next"]
; AntiAlias=1
; Hidden=1
; Group=MediaControls
[MeterPosition]
Meter=STRING
MeasureName=MeasurePosition
X=(25*#Scale#)
Y=(10*#Scale#)R
FontFace=Nexa Light
FontSize=(16*#Scale#)
FontColor=255,255,255
AntiAlias=1
ClipString=1
Text="%1"
Hidden=1
Group=MediaControls
[MeterDividier]
Meter=STRING
MeterStyle=MeterPosition
X=(100*#Scale#)
Y=0r
Text="-"
Hidden=1
Group=MediaControls
[MeterDuration]
Meter=STRING
MeterStyle=MeterPosition
MeasureName=MeasureDuration
X=(10*#Scale#)R
Y=0r
Text="%1"
Hidden=1
Group=MediaControls

; ; Meter - track and artist
; [MeterArtist]
; Meter=STRING
; MeasureName=MeasureArtist
; X=(225*#Scale#)
; Y=(#BarHeight#+(45*#Scale#))
; H=(100*#Scale#)
; W=(#SkinWidth#-300*#Scale#)
; FontFace=#Font1#
; FontSize=(#FontSize1#*#Scale#)
; FontColor=#TextColor#
; AntiAlias=1
; ClipString=2
; StringCase=UPPER
; Text="%1"
; Group=TrackInfo
; [MeterTrack]
; Meter=STRING
; MeasureName=MeasurePlayer
; X=7r
; Y=0R
; H=(55*#Scale#)
; W=(#SkinWidth#-300*#Scale#)
; FontFace=#Font2#
; FontSize=(#FontSize2#*#Scale#)
; FontColor=#TextColor#
; AntiAlias=1
; ClipString=1
; StringCase=UPPER
; Text="%1"
; Group=TrackInfo
